#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0 on Thu Feb 28 13:53:10 2019
#

import wx
import time
from wx import TextCtrl

import serial
import serial.tools.list_ports as port_list
from serial import SerialException

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class frmSerialMonitor(wx.Frame):
    txtSerialMonitor = None  # type: TextCtrl

    def __init__(self, *args, **kwds):
        # begin wxGlade: frmSerialMonitor.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 300))
        self.cmbBaudRate = wx.ComboBox(self, wx.ID_ANY,
                                       choices=["300", "1200", "2400", "4800", "9600", "19200", "38400", "57600",
                                                "74880", "115200", "230400", "250000", "500000", "1000000", "2000000"],
                                       style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.cmbPorts = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.btnRefreshPorts = wx.Button(self, wx.ID_ANY, "Refresh")
        self.txtSerialMonitor = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.txtSubmitString = wx.TextCtrl(self, wx.ID_ANY, "")
        self.btnSubmit = wx.Button(self, wx.ID_ANY, "Submit")


        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.BaudRateChanged, self.cmbBaudRate)
        self.Bind(wx.EVT_COMBOBOX, self.PortChanged, self.cmbPorts)
        self.Bind(wx.EVT_BUTTON, self.RefreshPorts, self.btnRefreshPorts)
        self.Bind(wx.EVT_BUTTON, self.Submit, self.btnSubmit)
        self.Bind(wx.EVT_CHAR_HOOK, self.on_key)
        # end wxGlade

        self.ser = None

    def __set_properties(self):
        # begin wxGlade: frmSerialMonitor.__set_properties
        self.SetTitle("Python Serial Monitor")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: frmSerialMonitor.__do_layout
        szrMain = wx.BoxSizer(wx.VERTICAL)
        szrPorts = wx.BoxSizer(wx.HORIZONTAL)
        szrPorts.Add(self.cmbPorts, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        szrPorts.Add(self.btnRefreshPorts, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
        szrMain.Add(szrPorts, 0, wx.EXPAND, 0)
        szrMain.Add(self.cmbBaudRate, 0, wx.EXPAND, 0)
        szrMain.Add(self.txtSerialMonitor, 1, wx.EXPAND, 0)
        szrMain.Add(self.txtSubmitString, 0, wx.EXPAND, 0)
        szrMain.Add(self.btnSubmit, 0, wx.EXPAND, 0)
        self.SetSizer(szrMain)
        self.Layout()
        # end wxGlade

        self.RefreshPorts(None)
        self.cmbBaudRate.SetSelection(9)

    def PortChanged(self, event):  # wxGlade: frmSerialMonitor.<event_handler>

        try:

            self.txtSerialMonitor.AppendText('** Opening Serial Port\r\n')
            self.ser = serial.Serial(
                port=self.cmbPorts.GetString(self.cmbPorts.GetCurrentSelection()),
                baudrate=int(self.cmbBaudRate.GetString(self.cmbBaudRate.GetCurrentSelection())),
                parity=serial.PARITY_ODD,
                stopbits=serial.STOPBITS_TWO,
                bytesize=serial.SEVENBITS,
                timeout=0.4,  # IMPORTANT, can be lower or higher
                inter_byte_timeout=0.1  # Alternative
            )

            self.txtSerialMonitor.AppendText('** Trying to Open\r\n')
            if (self.ser.isOpen() == False):
                self.ser.open()
                self.txtSerialMonitor.AppendText('** Serial Port Opened')
            else:
                self.txtSerialMonitor.AppendText('** Serial Port Already Open')

            self.txtSerialMonitor.AppendText('\r\n** Baud Rate:' + self.cmbBaudRate.GetString(self.cmbBaudRate.GetCurrentSelection()) + '\r\n')

        except serial.serialutil.SerialException as e:
            self.txtSerialMonitor.AppendText('** An Error Occurred while Opening the Serial Port')
            print('>> Error: ', e)

    def BaudRateChanged(self, event):  # wxGlade: frmSerialMonitor.<event_handler>
        cmbBox = self.cmbPorts
        evt = wx.CommandEvent(wx.wxEVT_COMMAND_COMBOBOX_SELECTED, cmbBox.GetId())
        wx.PostEvent(cmbBox, evt)
        #event.Skip()

    def RefreshPorts(self, event):  # wxGlade: frmSerialMonitor.<event_handler>
        ports = list(port_list.comports())
        self.cmbPorts.Clear()

        for p in ports:
            self.cmbPorts.Append(p.device)

    def on_key(self, event):
        key = event.GetKeyCode()
        if key == wx.WXK_RETURN:
            button = self.btnSubmit
            evt = wx.CommandEvent(wx.wxEVT_COMMAND_BUTTON_CLICKED, button.GetId())
            wx.PostEvent(button, evt)
        else:
            event.Skip()



    def Submit(self, event):  # wxGlade: frmSerialMonitor.<event_handler>

        if self.txtSubmitString.GetValue() == 'exit':
            if(self.ser != None and self.ser.isOpen()):
                self.ser.close()
            exit()

        if(self.ser != None):
            if self.txtSubmitString.GetValue() == 'exit':
                self.ser.close()
                exit()
            else:
                strOut = self.txtSubmitString.GetValue() + b'\r\n'
                self.txtSerialMonitor.AppendText("\r\n>> " + self.txtSubmitString.GetValue())
                self.ser.write(strOut.encode())
                out = ''
                # let's wait one second before reading output (let's give device time to answer)
                time.sleep(1)
                while self.ser.inWaiting() > 0:
                    out += self.ser.read(1)

                if out != '':
                    self.txtSerialMonitor.AppendText(out)

        self.txtSubmitString.Clear()


# end of class frmSerialMonitor

class MyApp(wx.App):
    def OnInit(self):
        self.frameSerialMonitor = frmSerialMonitor(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frameSerialMonitor)
        self.frameSerialMonitor.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()